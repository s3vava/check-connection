document.addEventListener('DOMContentLoaded', function() {
    const checkButton = document.getElementById('checkButton');
    const resultDiv = document.getElementById('result');
    
    checkButton.addEventListener('click', checkYouTubeAccess);
    
    async function checkYouTubeAccess() {
        checkButton.disabled = true;
        checkButton.innerHTML = '<span class="loading"></span>–ü—Ä–æ–≤–µ—Ä—è–µ–º...';
        resultDiv.style.display = 'none';
        
        try {
            // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Netlify
            const response = await fetch('/.netlify/functions/check-youtube', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    videoUrl: 'https://www.youtube.com/shorts/vjJkdBXVgsk'
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            displayResult(data);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            displayError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ' + error.message);
        } finally {
            checkButton.disabled = false;
            checkButton.innerHTML = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube';
        }
    }
    
    function displayResult(data) {
        const { speed, status, downloadTime, fileSize } = data;
        
        let statusClass = '';
        let statusIcon = '';
        let statusText = '';
        
        switch (status) {
            case 'excellent':
                statusClass = 'status-excellent';
                statusIcon = 'üü¢';
                statusText = '–û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
                break;
            case 'good':
                statusClass = 'status-good';
                statusIcon = 'üü°';
                statusText = '–•–æ—Ä–æ—à–∏–π –¥–æ—Å—Ç—É–ø';
                break;
            case 'poor':
                statusClass = 'status-poor';
                statusIcon = 'üî¥';
                statusText = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                break;
        }
        
        resultDiv.className = `result ${statusClass}`;
        resultDiv.innerHTML = `
            <h3>${statusIcon} ${statusText}</h3>
            <p><strong>–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏:</strong> ${speed.toFixed(2)} –ú–ë/—Å</p>
            <p><strong>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</strong> ${(fileSize / 1024 / 1024).toFixed(2)} –ú–ë</p>
            <p><strong>–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:</strong> ${downloadTime.toFixed(2)} —Å–µ–∫</p>
        `;
        resultDiv.style.display = 'block';
    }
    
    function displayError(message) {
        resultDiv.className = 'result error';
        resultDiv.innerHTML = `
            <h3>‚ùå –û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
        `;
        resultDiv.style.display = 'block';
    }
});