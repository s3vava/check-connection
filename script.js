// script.js

class VPNDiagnostics {
    constructor() {
        this.services = {
            youtube: { name: 'YouTube', timeout: 6000 },
            telegram: { name: 'Telegram', timeout: 3000, url: 'https://web.telegram.org/favicon.ico' },
            whatsapp: { name: 'WhatsApp', timeout: 3000, url: 'https://web.whatsapp.com/favicon.ico' },
            instagram: { name: 'Instagram', timeout: 3000, url: 'https://www.instagram.com/static/images/ico/favicon.ico/36b3ee2d91ed.ico' },
            chatgpt: { name: 'ChatGPT', timeout: 3000, url: 'https://chat.openai.com/favicon.ico' }
        };
        
        this.youtubeLoadStart = null;
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('start-speed-test').addEventListener('click', () => this.startSpeedTest());
        document.getElementById('check-services').addEventListener('click', () => this.checkAllServices());
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(() => this.checkAllServices(), 1000);
    }

    // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenSpeedTest –ª–æ–≥–∏–∫–∏
    async startSpeedTest() {
        const btn = document.getElementById('start-speed-test');
        const results = document.getElementById('speed-results');
        const progress = document.getElementById('speed-progress');

        btn.disabled = true;
        btn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...';
        results.classList.add('hidden');
        progress.classList.remove('hidden');

        try {
            // –¢–µ—Å—Ç –ø–∏–Ω–≥–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            this.updateProgress(5, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞...');
            const pingResult = await this.testPing();
            this.updateProgress(25, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞ —Å—Ä–∞–∑—É
            document.getElementById('ping-result').textContent = `${pingResult} ms`;
            document.getElementById('ping-result').className = this.getPingClass(pingResult);

            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–π)
            this.updateProgress(30, '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏...');
            const downloadSpeed = await this.testDownloadSpeed();
            this.updateProgress(70, '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            document.getElementById('download-speed').textContent = `${downloadSpeed.toFixed(1)} Mbps`;

            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–π)
            this.updateProgress(75, '–¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏...');
            const uploadSpeed = await this.testUploadSpeed();
            this.updateProgress(100, '–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            document.getElementById('upload-speed').textContent = `${uploadSpeed.toFixed(1)} Mbps`;

            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            setTimeout(() => {
                results.classList.remove('hidden');
                progress.classList.add('hidden');
            }, 500);

        } catch (error) {
            console.error('Speed test error:', error);
            this.updateProgress(0, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤');
            setTimeout(() => {
                progress.classList.add('hidden');
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
            }, 1000);
        }

        btn.disabled = false;
        btn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏';
    }

    updateProgress(percent, message) {
        const progressFill = document.getElementById('progress-fill');
        const progressText = document.getElementById('progress-text');
        const progressLabel = document.querySelector('.progress-label');

        progressFill.style.width = `${percent}%`;
        progressText.textContent = `${percent}%`;
        if (message) {
            progressLabel.textContent = message;
        }
    }

    getPingClass(ping) {
        if (ping <= 50) return 'metric-value excellent';
        if (ping <= 100) return 'metric-value good';
        return 'metric-value slow';
    }

    // –¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∫ —Ä–∞–∑–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
    async testPing() {
        const testServers = [
            //'https://www.google.com/generate_204',
            'https://www.cloudflare.com/cdn-cgi/trace',
            //'https://httpbin.org/status/204',
            //'https://www.gstatic.com/generate_204'
        ];

        let totalPing = 0;
        let successCount = 0;

        for (let server of testServers) {
            try {
                const startTime = performance.now();
                const response = await Promise.race([
                    fetch(server, { 
                        method: 'HEAD',
                        cache: 'no-cache',
                        mode: 'no-cors' // –ò–∑–±–µ–≥–∞–µ–º CORS –ø—Ä–æ–±–ª–µ–º
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 2000))
                ]);
                
                const endTime = performance.now();
                const pingTime = Math.round(endTime - startTime);
                
                if (pingTime < 2000) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                    totalPing += pingTime;
                    successCount++;
                }
            } catch (error) {
                console.log(`Ping to ${server} failed:`, error.message);
            }
        }

        if (successCount === 0) {
            return 999; // –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        }

        return Math.round(totalPing / successCount);
    }

    // –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    async testDownloadSpeed() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        const testFiles = [
            // Hetzner - –æ—Ç–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            //{ url: 'https://ash-speed.hetzner.com/100MB.bin', size: 100, name: '100MB (Hetzner)' },
            { url: 'https://fsn1-speed.hetzner.com/100MB.bin', size: 100, name: '100MB (Hetzner EU)' },
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            //{ url: 'https://proof.ovh.net/files/100Mb.dat', size: 100, name: '100MB (OVH)' },
            //{ url: 'https://lg.newark.linode.com/100MB-newark.bin', size: 100, name: '100MB (Linode)' },
            
            // Fallback –Ω–∞ –º–µ–Ω—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã
            //{ url: 'https://ash-speed.hetzner.com/10MB.bin', size: 10, name: '10MB (Hetzner)' }
        ];

        let totalSpeed = 0;
        let testCount = 0;
        let currentTest = 0;

        for (let testFile of testFiles) {
            currentTest++;
            try {
                this.updateProgress(25 + (currentTest * 10), `–ó–∞–≥—Ä—É–∑–∫–∞ ${testFile.name}...`);
                
                const startTime = performance.now();
                
                const response = await Promise.race([
                    fetch(testFile.url, { 
                        cache: 'no-cache',
                        method: 'GET'
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 30000)) // 30 —Å–µ–∫
                ]);

                if (response.ok) {
                    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞–º–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    const reader = response.body.getReader();
                    let receivedLength = 0;
                    const chunks = [];

                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        
                        chunks.push(value);
                        receivedLength += value.length;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                        const downloadProgress = (receivedLength / (testFile.size * 1024 * 1024)) * 10;
                        const currentProgress = 25 + ((currentTest - 1) * 10) + downloadProgress;
                        this.updateProgress(Math.min(currentProgress, 70), `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Math.round(receivedLength / 1024 / 1024)}MB –∏–∑ ${testFile.name}`);
                    }

                    const endTime = performance.now();
                    const duration = (endTime - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    const sizeInMB = receivedLength / (1024 * 1024); // –≤ MB
                    const speedMbps = (sizeInMB * 8) / duration; // –≤ Mbps
                    
                    console.log(`Download test ${testFile.name}: ${sizeInMB.toFixed(1)}MB in ${duration.toFixed(1)}s = ${speedMbps.toFixed(1)} Mbps`);
                    
                    if (speedMbps > 0.1 && speedMbps < 2000) { // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                        totalSpeed += speedMbps;
                        testCount++;
                        
                        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ 100MB —Ç–µ—Å—Ç–∞ –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                        if (testFile.size >= 100 && testCount >= 1) {
                            console.log('Successful large file test, stopping early');
                            break;
                        }
                    }
                }
                
            } catch (error) {
                console.log(`Download test failed for ${testFile.name}:`, error.message);
                
                // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
                if (currentTest >= 3 && testCount === 0) {
                    console.log('Multiple failures, using fallback test');
                    return await this.fallbackDownloadTest();
                }
            }
        }

        if (testCount === 0) {
            console.log('All download tests failed, using fallback');
            return await this.fallbackDownloadTest();
        }

        const averageSpeed = totalSpeed / testCount;
        console.log(`Average download speed: ${averageSpeed.toFixed(1)} Mbps from ${testCount} tests`);
        
        return Math.round(averageSpeed * 10) / 10;
    }

    // –ó–∞–ø–∞—Å–Ω–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    async fallbackDownloadTest() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudflare –∏ –¥—Ä—É–≥–∏–µ CDN
            const testUrls = [
                //'https://cachefly.cachefly.net/10mb.test', // 10MB CacheFly
                'https://speed.cloudflare.com/__down?bytes=50000000', // 50MB Cloudflare
                //'https://via.placeholder.com/2048x2048.jpg', // ~400KB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                //'https://picsum.photos/2048/2048.jpg' // ~300KB —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ];
            
            let totalSpeed = 0;
            let testCount = 0;
            
            for (let url of testUrls) {
                for (let iteration = 0; iteration < 2; iteration++) {
                    try {
                        const startTime = performance.now();
                        const response = await Promise.race([
                            fetch(`${url}${url.includes('?') ? '&' : '?'}t=${Date.now()}&i=${iteration}`, { 
                                cache: 'no-cache' 
                            }),
                            new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 10000))
                        ]);
                        
                        if (response.ok) {
                            const data = await response.blob();
                            const endTime = performance.now();
                            
                            const duration = (endTime - startTime) / 1000;
                            const sizeInMB = data.size / (1024 * 1024);
                            const speedMbps = (sizeInMB * 8) / duration;
                            
                            if (speedMbps > 0.1 && speedMbps < 500) {
                                totalSpeed += speedMbps;
                                testCount++;
                                console.log(`Fallback test: ${sizeInMB.toFixed(2)}MB in ${duration.toFixed(1)}s = ${speedMbps.toFixed(1)} Mbps`);
                            }
                        }
                        
                        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await new Promise(resolve => setTimeout(resolve, 200));
                        
                    } catch (error) {
                        console.log(`Fallback test failed for ${url}:`, error.message);
                    }
                }
            }
            
            if (testCount > 0) {
                const avgSpeed = totalSpeed / testCount;
                console.log(`Fallback average: ${avgSpeed.toFixed(1)} Mbps from ${testCount} tests`);
                return Math.round(avgSpeed * 10) / 10;
            }
            
            return 5.0; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            
        } catch (error) {
            console.log('Fallback download test failed:', error);
            return 2.0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        }
    }

    // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
async testUploadSpeed() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    const uploadServices = [
        {
            url: 'https://httpbin.org/post',
            name: 'HTTPBin',
            maxSize: 10 * 1024 * 1024, // 10MB –º–∞–∫—Å–∏–º—É–º
            headers: { 'Content-Type': 'application/octet-stream' }
        },
        {
            url: 'https://postman-echo.com/post',
            name: 'Postman Echo',
            maxSize: 5 * 1024 * 1024, // 5MB –º–∞–∫—Å–∏–º—É–º
            headers: { 'Content-Type': 'application/octet-stream' }
        },
        {
            url: 'https://reqres.in/api/users',
            name: 'ReqRes',
            maxSize: 2 * 1024 * 1024, // 2MB –º–∞–∫—Å–∏–º—É–º
            headers: { 'Content-Type': 'application/json' }
        }
    ];

    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö
    const testSizes = [
        64 * 1024,      // 64KB
        256 * 1024,     // 256KB
        1024 * 1024,    // 1MB
        2 * 1024 * 1024, // 2MB
        5 * 1024 * 1024, // 5MB
    ];

    let bestResults = [];
    let currentTest = 0;
    const totalTests = uploadServices.length * 3; // –ø–æ 3 —Ç–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å

    for (let service of uploadServices) {
        console.log(`\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${service.name} ===`);
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        for (let testIndex = 0; testIndex < 3; testIndex++) {
            currentTest++;
            
            // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
            let testSize;
            if (testIndex === 0) testSize = testSizes[1]; // 256KB
            else if (testIndex === 1) testSize = testSizes[2]; // 1MB
            else testSize = Math.min(testSizes[3], service.maxSize); // 2MB –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º —Å–µ—Ä–≤–∏—Å–∞

            const sizeLabel = testSize >= 1024 * 1024 
                ? `${(testSize / 1024 / 1024).toFixed(1)}MB` 
                : `${(testSize / 1024).toFixed(0)}KB`;
            
            try {
                this.updateProgress(75 + (currentTest * 20 / totalTests), 
                    `–í—ã–≥—Ä—É–∑–∫–∞ ${sizeLabel} –≤ ${service.name}... (${testIndex + 1}/3)`);
                
                const result = await this.performUploadTest(service, testSize, sizeLabel);
                
                if (result && result.speedMbps > 0.1 && result.speedMbps < 1000) {
                    bestResults.push(result);
                    console.log(`‚úì ${sizeLabel} ‚Üí ${result.speedMbps.toFixed(1)} Mbps (${result.duration.toFixed(1)}s)`);
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                await new Promise(resolve => setTimeout(resolve, 500));

            } catch (error) {
                console.log(`‚úó ${sizeLabel} –∫ ${service.name}: ${error.message}`);
            }
        }

        // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        if (bestResults.length >= 5) {
            console.log('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ');
            break;
        }
    }

    return this.calculateAverageUploadSpeed(bestResults);
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
async performUploadTest(service, size, sizeLabel) {
    const testData = this.generateOptimizedTestData(size, service.name);
    
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        let uploadStart = null;
        let uploadProgress = [];
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        xhr.upload.addEventListener('progress', (e) => {
            if (!uploadStart) {
                uploadStart = performance.now();
            }
            
            if (e.lengthComputable) {
                const currentTime = performance.now();
                const elapsedTime = (currentTime - uploadStart) / 1000;
                const uploadedMB = e.loaded / (1024 * 1024);
                const instantSpeed = (uploadedMB * 8) / elapsedTime;
                
                uploadProgress.push({
                    time: elapsedTime,
                    loaded: e.loaded,
                    total: e.total,
                    speed: instantSpeed
                });
            }
        });

        xhr.addEventListener('load', () => {
            if (xhr.status >= 200 && xhr.status < 300) {
                const endTime = performance.now();
                
                if (uploadProgress.length > 0) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    const lastProgress = uploadProgress[uploadProgress.length - 1];
                    const avgSpeed = this.calculateProgressiveSpeed(uploadProgress);
                    
                    resolve({
                        speedMbps: avgSpeed,
                        duration: lastProgress.time,
                        size: size,
                        service: service.name,
                        sizeLabel: sizeLabel,
                        progressPoints: uploadProgress.length
                    });
                } else {
                    // Fallback –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                    const totalTime = (endTime - uploadStart) / 1000;
                    const sizeInMB = size / (1024 * 1024);
                    const speedMbps = (sizeInMB * 8) / totalTime;
                    
                    resolve({
                        speedMbps: speedMbps,
                        duration: totalTime,
                        size: size,
                        service: service.name,
                        sizeLabel: sizeLabel,
                        progressPoints: 0
                    });
                }
            } else {
                reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));
            }
        });

        xhr.addEventListener('error', () => {
            reject(new Error('Network error'));
        });

        xhr.addEventListener('timeout', () => {
            reject(new Error('Timeout'));
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        xhr.open('POST', service.url);
        xhr.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        Object.entries(service.headers).forEach(([key, value]) => {
            xhr.setRequestHeader(key, value);
        });
        
        xhr.setRequestHeader('Content-Length', size.toString());
        xhr.setRequestHeader('User-Agent', 'VPN-Speed-Test/1.0');
        
        const requestStart = performance.now();
        uploadStart = requestStart;
        
        xhr.send(testData);
    });
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
calculateProgressiveSpeed(progressPoints) {
    if (progressPoints.length < 2) {
        return 0;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10% –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10% –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    const startIndex = Math.floor(progressPoints.length * 0.1);
    const endIndex = Math.floor(progressPoints.length * 0.9);
    
    if (endIndex <= startIndex) {
        // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
        const firstPoint = progressPoints[0];
        const lastPoint = progressPoints[progressPoints.length - 1];
        
        const timeDiff = lastPoint.time - firstPoint.time;
        const dataDiff = (lastPoint.loaded - firstPoint.loaded) / (1024 * 1024);
        
        return timeDiff > 0 ? (dataDiff * 8) / timeDiff : 0;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    const startPoint = progressPoints[startIndex];
    const endPoint = progressPoints[endIndex];
    
    const timeDiff = endPoint.time - startPoint.time;
    const dataDiff = (endPoint.loaded - startPoint.loaded) / (1024 * 1024);
    
    return timeDiff > 0 ? (dataDiff * 8) / timeDiff : 0;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
generateOptimizedTestData(size, serviceName) {
    // –î–ª—è JSON —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (serviceName === 'ReqRes') {
        const baseObject = {
            name: "SpeedTest",
            job: "DataTransfer",
            timestamp: Date.now(),
            testId: Math.random().toString(36).substring(7)
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const targetDataSize = size - JSON.stringify(baseObject).length - 100;
        const fillData = 'A'.repeat(Math.max(0, targetDataSize));
        
        return JSON.stringify({
            ...baseObject,
            data: fillData
        });
    }
    
    // –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const buffer = new ArrayBuffer(size);
    const view = new Uint8Array(buffer);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã–µ)
    // —á—Ç–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    for (let i = 0; i < size; i++) {
        if (i % 1024 === 0) {
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤
            view[i] = 0xFF;
        } else if (i % 256 === 0) {
            // –ú–∞—Ä–∫–µ—Ä—ã —Å–µ–∫—Ü–∏–π
            view[i] = 0xAA;
        } else if (i % 64 === 0) {
            // –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            view[i] = (i / 64) % 256;
        } else {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å—é
            view[i] = (i * 13 + 37) % 256;
        }
    }
    
    return buffer;
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
calculateAverageUploadSpeed(results) {
    if (results.length === 0) {
        console.log('–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return 0.5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    }

    console.log(`\n=== –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (${results.length} —Ç–µ—Å—Ç–æ–≤) ===`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const bySize = {};
    results.forEach(result => {
        const sizeKey = result.sizeLabel;
        if (!bySize[sizeKey]) bySize[sizeKey] = [];
        bySize[sizeKey].push(result.speedMbps);
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    Object.entries(bySize).forEach(([size, speeds]) => {
        const avg = speeds.reduce((a, b) => a + b, 0) / speeds.length;
        const min = Math.min(...speeds);
        const max = Math.max(...speeds);
        console.log(`${size}: avg=${avg.toFixed(1)} min=${min.toFixed(1)} max=${max.toFixed(1)} Mbps (${speeds.length} —Ç–µ—Å—Ç–æ–≤)`);
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –≤–º–µ—Å—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
    const allSpeeds = results.map(r => r.speedMbps).sort((a, b) => a - b);
    const median = allSpeeds.length % 2 === 0
        ? (allSpeeds[allSpeeds.length / 2 - 1] + allSpeeds[allSpeeds.length / 2]) / 2
        : allSpeeds[Math.floor(allSpeeds.length / 2)];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 50% –æ—Ç –º–µ–¥–∏–∞–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    const filteredResults = results.filter(r => 
        r.speedMbps >= median * 0.5 && r.speedMbps <= median * 2.0
    );

    if (filteredResults.length > 0) {
        const avgFiltered = filteredResults.reduce((sum, r) => sum + r.speedMbps, 0) / filteredResults.length;
        console.log(`–ú–µ–¥–∏–∞–Ω–∞: ${median.toFixed(1)} Mbps`);
        console.log(`–°—Ä–µ–¥–Ω–µ–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ: ${avgFiltered.toFixed(1)} Mbps (${filteredResults.length} –∏–∑ ${results.length} —Ç–µ—Å—Ç–æ–≤)`);
        
        return Math.round(avgFiltered * 10) / 10;
    }

    return Math.round(median * 10) / 10;
}

    // –ó–∞–ø–∞—Å–Ω–æ–π —Ç–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏
    async fallbackUploadTest() {
        try {
            // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
            const fallbackServices = [
                'https://httpbin.org/post',
                'https://postman-echo.com/post',
                'https://reqres.in/api/users'
            ];
            
            const testSizes = [64 * 1024, 128 * 1024, 256 * 1024]; // 64KB, 128KB, 256KB
            let totalSpeed = 0;
            let testCount = 0;

            for (let service of fallbackServices) {
                for (let size of testSizes) {
                    try {
                        const testData = this.generateBinaryTestData(size);
                        const startTime = performance.now();
                        
                        const response = await Promise.race([
                            fetch(service, {
                                method: 'POST',
                                body: testData,
                                headers: {
                                    'Content-Type': 'application/octet-stream'
                                }
                            }),
                            new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 10000))
                        ]);

                        if (response.ok) {
                            const endTime = performance.now();
                            const duration = (endTime - startTime) / 1000;
                            const sizeInMB = size / (1024 * 1024);
                            const speedMbps = (sizeInMB * 8) / duration;
                            
                            if (speedMbps > 0.1 && speedMbps < 200) {
                                totalSpeed += speedMbps;
                                testCount++;
                                console.log(`Fallback upload: ${(size/1024).toFixed(0)}KB in ${duration.toFixed(1)}s = ${speedMbps.toFixed(1)} Mbps`);
                            }
                        }
                        
                        await new Promise(resolve => setTimeout(resolve, 300));
                        
                    } catch (error) {
                        console.log(`Fallback upload test failed:`, error.message);
                    }
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã, –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                if (testCount >= 3) break;
            }

            if (testCount > 0) {
                const avgSpeed = totalSpeed / testCount;
                console.log(`Fallback upload average: ${avgSpeed.toFixed(1)} Mbps from ${testCount} tests`);
                return Math.round(avgSpeed * 10) / 10;
            }

            return 1.5; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏
            
        } catch (error) {
            console.log('Fallback upload test failed:', error);
            return 0.8; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    generateBinaryTestData(size) {
        const buffer = new ArrayBuffer(size);
        const view = new Uint8Array(buffer);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        for (let i = 0; i < size; i++) {
            view[i] = Math.floor(Math.random() * 256);
        }
        
        return buffer;
    }

    generateTestData(size) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < size; i++) {
            result += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return result;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async checkAllServices() {
        const btn = document.getElementById('check-services');
        btn.disabled = true;
        btn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ "–ø—Ä–æ–≤–µ—Ä–∫–∞"
        Object.keys(this.services).forEach(service => {
            this.updateServiceStatus(service, 'checking', '–ü—Ä–æ–≤–µ—Ä–∫–∞...');
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const promises = Object.keys(this.services).map(service => {
            if (service === 'youtube') {
                return this.checkYouTubeService();
            } else {
                return this.checkService(service);
            }
        });

        await Promise.all(promises);

        btn.disabled = false;
        btn.textContent = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube —á–µ—Ä–µ–∑ iframe
    async checkYouTubeService() {
        return new Promise((resolve) => {
            this.youtubeLoadStart = performance.now();
            const iframe = document.getElementById('youtube-test');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            const timeout = setTimeout(() => {
                this.updateServiceStatus('youtube', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
            }, this.services.youtube.timeout);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            const handleLoad = () => {
                const loadTime = performance.now() - this.youtubeLoadStart;
                clearTimeout(timeout);
                
                if (loadTime < 3000) {
                    this.updateServiceStatus('youtube', 'ok', '–û–ö');
                } else if (loadTime < 6000) {
                    this.updateServiceStatus('youtube', 'slow', '–ó–∞–º–µ–¥–ª–µ–Ω');
                } else {
                    this.updateServiceStatus('youtube', 'error', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
                }
                resolve();
            };

            iframe.onload = handleLoad;
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º iframe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            iframe.src = iframe.src;
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async checkService(serviceName) {
        const service = this.services[serviceName];
        const startTime = performance.now();

        try {
            const response = await Promise.race([
                fetch(service.url, { 
                    method: 'HEAD',
                    cache: 'no-cache',
                    mode: 'no-cors' // –ò–∑–±–µ–≥–∞–µ–º CORS –æ—à–∏–±–∫–∏
                }),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('timeout')), service.timeout)
                )
            ]);

            const loadTime = performance.now() - startTime;
            
            if (loadTime < 1000) {
                this.updateServiceStatus(serviceName, 'ok', '–û–ö');
            } else if (loadTime < 3000) {
                this.updateServiceStatus(serviceName, 'slow', '–ó–∞–º–µ–¥–ª–µ–Ω');
            } else {
                this.updateServiceStatus(serviceName, 'error', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
            }
        } catch (error) {
            // –î–ª—è no-cors —Ä–µ–∂–∏–º–∞ fetch –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            // –ü–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            const loadTime = performance.now() - startTime;
            
            if (error.message === 'timeout') {
                this.updateServiceStatus(serviceName, 'error', '–¢–∞–π–º–∞—É—Ç');
            } else if (loadTime < service.timeout) {
                // –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±—ã—Å—Ç—Ä–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
                this.updateServiceStatus(serviceName, 'ok', '–û–ö');
            } else {
                this.updateServiceStatus(serviceName, 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    updateServiceStatus(serviceName, status, text) {
        const statusElement = document.getElementById(`${serviceName}-status`);
        const indicator = statusElement.querySelector('.status-indicator');
        const textElement = statusElement.querySelector('.status-text');

        indicator.className = `status-indicator ${status}`;
        textElement.textContent = text;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube iframe
function handleYouTubeLoad() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ iframe
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ checkYouTubeService
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new VPNDiagnostics();
});