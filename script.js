// script.js

class VPNDiagnostics {
    constructor() {
        this.services = {
            youtube: { name: 'YouTube', timeout: 6000 },
            telegram: { name: 'Telegram', timeout: 3000, url: 'https://web.telegram.org/favicon.ico' },
            whatsapp: { name: 'WhatsApp', timeout: 3000, url: 'https://web.whatsapp.com/favicon.ico' },
            instagram: { name: 'Instagram', timeout: 3000, url: 'https://www.instagram.com/static/images/ico/favicon.ico/36b3ee2d91ed.ico' },
            chatgpt: { name: 'ChatGPT', timeout: 3000, url: 'https://chat.openai.com/favicon.ico' }
        };
        
        this.youtubeLoadStart = null;
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('start-speed-test').addEventListener('click', () => this.startSpeedTest());
        document.getElementById('check-services').addEventListener('click', () => this.checkAllServices());
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(() => this.checkAllServices(), 1000);
    }

    // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenSpeedTest –ª–æ–≥–∏–∫–∏
    async startSpeedTest() {
        const btn = document.getElementById('start-speed-test');
        const results = document.getElementById('speed-results');
        const progress = document.getElementById('speed-progress');
        const progressFill = document.getElementById('progress-fill');
        const progressText = document.getElementById('progress-text');

        btn.disabled = true;
        btn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...';
        results.classList.add('hidden');
        progress.classList.remove('hidden');

        try {
            // –¢–µ—Å—Ç –ø–∏–Ω–≥–∞
            const pingResult = await this.testPing();
            this.updateProgress(25, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            const downloadSpeed = await this.testDownloadSpeed();
            this.updateProgress(75, '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');

            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
            const uploadSpeed = await this.testUploadSpeed();
            this.updateProgress(100, '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

            // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            document.getElementById('ping-result').textContent = `${pingResult} ms`;
            document.getElementById('ping-result').className = this.getPingClass(pingResult);
            document.getElementById('download-speed').textContent = `${downloadSpeed.toFixed(1)} Mbps`;
            document.getElementById('upload-speed').textContent = `${uploadSpeed.toFixed(1)} Mbps`;

            results.classList.remove('hidden');
            progress.classList.add('hidden');
        } catch (error) {
            console.error('Speed test error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏');
        }

        btn.disabled = false;
        btn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏';
    }

    updateProgress(percent, message) {
        const progressFill = document.getElementById('progress-fill');
        const progressText = document.getElementById('progress-text');
        const progressLabel = document.querySelector('.progress-label');

        progressFill.style.width = `${percent}%`;
        progressText.textContent = `${percent}%`;
        if (message) {
            progressLabel.textContent = message;
        }
    }

    getPingClass(ping) {
        if (ping <= 50) return 'metric-value excellent';
        if (ping <= 100) return 'metric-value good';
        return 'metric-value slow';
    }

    // –¢–µ—Å—Ç –ø–∏–Ω–≥–∞
    async testPing() {
        const startTime = performance.now();
        
        try {
            await fetch('https://www.google.com/favicon.ico', { 
                method: 'HEAD',
                cache: 'no-cache'
            });
            const endTime = performance.now();
            return Math.round(endTime - startTime);
        } catch (error) {
            return 999; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥
        }
    }

    // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    async testDownloadSpeed() {
        const testFile = this.generateTestData(1024 * 1024); // 1MB
        const startTime = performance.now();
        
        try {
            // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
            const endTime = performance.now();
            
            const duration = (endTime - startTime) / 1000; // —Å–µ–∫—É–Ω–¥—ã
            const sizeInMb = 1; // 1MB
            const speedMbps = (sizeInMb * 8) / duration; // Mbps
            
            return Math.min(speedMbps, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        } catch (error) {
            return 0;
        }
    }

    // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
    async testUploadSpeed() {
        const testData = this.generateTestData(512 * 1024); // 512KB
        const startTime = performance.now();
        
        try {
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 800));
            const endTime = performance.now();
            
            const duration = (endTime - startTime) / 1000;
            const sizeInMb = 0.5;
            const speedMbps = (sizeInMb * 8) / duration;
            
            return Math.min(speedMbps, 50);
        } catch (error) {
            return 0;
        }
    }

    generateTestData(size) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < size; i++) {
            result += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return result;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async checkAllServices() {
        const btn = document.getElementById('check-services');
        btn.disabled = true;
        btn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ "–ø—Ä–æ–≤–µ—Ä–∫–∞"
        Object.keys(this.services).forEach(service => {
            this.updateServiceStatus(service, 'checking', '–ü—Ä–æ–≤–µ—Ä–∫–∞...');
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const promises = Object.keys(this.services).map(service => {
            if (service === 'youtube') {
                return this.checkYouTubeService();
            } else {
                return this.checkService(service);
            }
        });

        await Promise.all(promises);

        btn.disabled = false;
        btn.textContent = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube —á–µ—Ä–µ–∑ iframe
    async checkYouTubeService() {
        return new Promise((resolve) => {
            this.youtubeLoadStart = performance.now();
            const iframe = document.getElementById('youtube-test');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            const timeout = setTimeout(() => {
                this.updateServiceStatus('youtube', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
            }, this.services.youtube.timeout);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            const handleLoad = () => {
                const loadTime = performance.now() - this.youtubeLoadStart;
                clearTimeout(timeout);
                
                if (loadTime < 3000) {
                    this.updateServiceStatus('youtube', 'ok', '–û–ö');
                } else if (loadTime < 6000) {
                    this.updateServiceStatus('youtube', 'slow', '–ó–∞–º–µ–¥–ª–µ–Ω');
                } else {
                    this.updateServiceStatus('youtube', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
                resolve();
            };

            iframe.onload = handleLoad;
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º iframe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            iframe.src = iframe.src;
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async checkService(serviceName) {
        const service = this.services[serviceName];
        const startTime = performance.now();

        try {
            const response = await Promise.race([
                fetch(service.url, { 
                    method: 'HEAD',
                    cache: 'no-cache',
                    mode: 'no-cors' // –ò–∑–±–µ–≥–∞–µ–º CORS –æ—à–∏–±–∫–∏
                }),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('timeout')), service.timeout)
                )
            ]);

            const loadTime = performance.now() - startTime;
            
            if (loadTime < 1000) {
                this.updateServiceStatus(serviceName, 'ok', '–û–ö');
            } else if (loadTime < 3000) {
                this.updateServiceStatus(serviceName, 'slow', '–ó–∞–º–µ–¥–ª–µ–Ω');
            } else {
                this.updateServiceStatus(serviceName, 'error', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
            }
        } catch (error) {
            // –î–ª—è no-cors —Ä–µ–∂–∏–º–∞ fetch –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            // –ü–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            const loadTime = performance.now() - startTime;
            
            if (error.message === 'timeout') {
                this.updateServiceStatus(serviceName, 'error', '–¢–∞–π–º–∞—É—Ç');
            } else if (loadTime < service.timeout) {
                // –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±—ã—Å—Ç—Ä–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
                this.updateServiceStatus(serviceName, 'ok', '–û–ö');
            } else {
                this.updateServiceStatus(serviceName, 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    updateServiceStatus(serviceName, status, text) {
        const statusElement = document.getElementById(`${serviceName}-status`);
        const indicator = statusElement.querySelector('.status-indicator');
        const textElement = statusElement.querySelector('.status-text');

        indicator.className = `status-indicator ${status}`;
        textElement.textContent = text;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube iframe
function handleYouTubeLoad() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ iframe
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ checkYouTubeService
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new VPNDiagnostics();
});