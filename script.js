// script.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤

class VPNDiagnostics {
    constructor() {
        this.services = {
            youtube: { name: 'YouTube', timeout: 6000 },
            telegram: { name: 'Telegram', timeout: 3000 },
            whatsapp: { name: 'WhatsApp', timeout: 3000 },
            instagram: { name: 'Instagram', timeout: 3000 },
            chatgpt: { name: 'ChatGPT', timeout: 3000 }
        };
        
        this.youtubeLoadStart = null;
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä—â–∏–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        this.serviceChecker = new ServiceChecker();
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('start-speed-test').addEventListener('click', () => this.startSpeedTest());
        document.getElementById('check-services').addEventListener('click', () => this.checkAllServices());
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(() => this.checkAllServices(), 1000);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π ServiceChecker)
    async checkAllServices() {
        const btn = document.getElementById('check-services');
        btn.disabled = true;
        btn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...';

        try {
            await this.serviceChecker.checkAllServices();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        }

        btn.disabled = false;
        btn.textContent = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã';
    }

    // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenSpeedTest –ª–æ–≥–∏–∫–∏
    async startSpeedTest() {
        const btn = document.getElementById('start-speed-test');
        const results = document.getElementById('speed-results');
        const progress = document.getElementById('speed-progress');

        btn.disabled = true;
        btn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...';
        results.classList.add('hidden');
        progress.classList.remove('hidden');

        try {
            // –¢–µ—Å—Ç –ø–∏–Ω–≥–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            this.updateProgress(5, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞...');
            const pingResult = await this.testPing();
            this.updateProgress(25, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞ —Å—Ä–∞–∑—É
            document.getElementById('ping-result').textContent = `${pingResult} ms`;
            document.getElementById('ping-result').className = this.getPingClass(pingResult);

            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–π)
            this.updateProgress(30, '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏...');
            const downloadSpeed = await this.testDownloadSpeed();
            this.updateProgress(70, '–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            document.getElementById('download-speed').textContent = `${downloadSpeed.toFixed(1)} Mbps`;

            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            this.updateProgress(75, '–¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏...');
            const uploadSpeed = await this.testUploadSpeed();
            this.updateProgress(100, '–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            document.getElementById('upload-speed').textContent = `${uploadSpeed.toFixed(1)} Mbps`;

            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            setTimeout(() => {
                results.classList.remove('hidden');
                progress.classList.add('hidden');
            }, 500);

        } catch (error) {
            console.error('Speed test error:', error);
            this.updateProgress(0, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤');
            setTimeout(() => {
                progress.classList.add('hidden');
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
            }, 1000);
        }

        btn.disabled = false;
        btn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏';
    }

    updateProgress(percent, message) {
        const progressFill = document.getElementById('progress-fill');
        const progressText = document.getElementById('progress-text');
        const progressLabel = document.querySelector('.progress-label');

        progressFill.style.width = `${percent}%`;
        progressText.textContent = `${percent}%`;
        if (message) {
            progressLabel.textContent = message;
        }
    }

    getPingClass(ping) {
        if (ping <= 50) return 'metric-value excellent';
        if (ping <= 100) return 'metric-value good';
        return 'metric-value slow';
    }

    // –¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∫ —Ä–∞–∑–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
    async testPing() {
        const testServers = [
            'https://www.cloudflare.com/cdn-cgi/trace',
            'https://1.1.1.1/',
            'https://www.google.com/generate_204'
        ];

        let totalPing = 0;
        let successCount = 0;

        for (let server of testServers) {
            try {
                const startTime = performance.now();
                const response = await Promise.race([
                    fetch(server, { 
                        method: 'HEAD',
                        cache: 'no-cache',
                        mode: 'no-cors' // –ò–∑–±–µ–≥–∞–µ–º CORS –ø—Ä–æ–±–ª–µ–º
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 2000))
                ]);
                
                const endTime = performance.now();
                const pingTime = Math.round(endTime - startTime);
                
                if (pingTime < 2000) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                    totalPing += pingTime;
                    successCount++;
                }
            } catch (error) {
                console.log(`Ping to ${server} failed:`, error.message);
            }
        }

        if (successCount === 0) {
            return 999; // –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        }

        return Math.round(totalPing / successCount);
    }

    // –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    async testDownloadSpeed() {
        const testFiles = [
            { url: 'https://fsn1-speed.hetzner.com/100MB.bin', size: 100, name: '100MB (Hetzner EU)' },
            { url: 'https://ash-speed.hetzner.com/10MB.bin', size: 10, name: '10MB (Hetzner)' }
        ];

        let totalSpeed = 0;
        let testCount = 0;
        let currentTest = 0;

        for (let testFile of testFiles) {
            currentTest++;
            try {
                this.updateProgress(25 + (currentTest * 10), `–ó–∞–≥—Ä—É–∑–∫–∞ ${testFile.name}...`);
                
                const startTime = performance.now();
                
                const response = await Promise.race([
                    fetch(testFile.url, { 
                        cache: 'no-cache',
                        method: 'GET'
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 30000))
                ]);

                if (response.ok) {
                    const reader = response.body.getReader();
                    let receivedLength = 0;

                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        
                        receivedLength += value.length;
                        
                        const downloadProgress = (receivedLength / (testFile.size * 1024 * 1024)) * 10;
                        const currentProgress = 25 + ((currentTest - 1) * 10) + downloadProgress;
                        this.updateProgress(Math.min(currentProgress, 70), `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Math.round(receivedLength / 1024 / 1024)}MB –∏–∑ ${testFile.name}`);
                    }

                    const endTime = performance.now();
                    const duration = (endTime - startTime) / 1000;
                    const sizeInMB = receivedLength / (1024 * 1024);
                    const speedMbps = (sizeInMB * 8) / duration;
                    
                    console.log(`Download test ${testFile.name}: ${sizeInMB.toFixed(1)}MB in ${duration.toFixed(1)}s = ${speedMbps.toFixed(1)} Mbps`);
                    
                    if (speedMbps > 0.1 && speedMbps < 2000) {
                        totalSpeed += speedMbps;
                        testCount++;
                        
                        if (testFile.size >= 100 && testCount >= 1) {
                            console.log('Successful large file test, stopping early');
                            break;
                        }
                    }
                }
                
            } catch (error) {
                console.log(`Download test failed for ${testFile.name}:`, error.message);
            }
        }

        if (testCount === 0) {
            return 5.0; // Fallback —Å–∫–æ—Ä–æ—Å—Ç—å
        }

        const averageSpeed = totalSpeed / testCount;
        return Math.round(averageSpeed * 10) / 10;
    }

    // –£–õ–£–ß–®–ï–ù–ù–´–ô —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
    async testUploadSpeed() {
        const uploadServices = [
            {
                url: 'https://httpbin.org/post',
                name: 'HTTPBin',
                maxSize: 10 * 1024 * 1024,
                headers: { 'Content-Type': 'application/octet-stream' }
            },
            {
                url: 'https://postman-echo.com/post',
                name: 'Postman Echo',
                maxSize: 5 * 1024 * 1024,
                headers: { 'Content-Type': 'application/octet-stream' }
            },
            {
                url: 'https://reqres.in/api/users',
                name: 'ReqRes',
                maxSize: 2 * 1024 * 1024,
                headers: { 'Content-Type': 'application/json' }
            }
        ];

        const testSizes = [
            64 * 1024,      // 64KB
            256 * 1024,     // 256KB
            1024 * 1024,    // 1MB
            2 * 1024 * 1024, // 2MB
            5 * 1024 * 1024, // 5MB
        ];

        let bestResults = [];
        let currentTest = 0;
        const totalTests = uploadServices.length * 3;

        for (let service of uploadServices) {
            console.log(`\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${service.name} ===`);
            
            for (let testIndex = 0; testIndex < 3; testIndex++) {
                currentTest++;
                
                let testSize;
                if (testIndex === 0) testSize = testSizes[1]; // 256KB
                else if (testIndex === 1) testSize = testSizes[2]; // 1MB
                else testSize = Math.min(testSizes[3], service.maxSize); // 2MB –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º —Å–µ—Ä–≤–∏—Å–∞

                const sizeLabel = testSize >= 1024 * 1024 
                    ? `${(testSize / 1024 / 1024).toFixed(1)}MB` 
                    : `${(testSize / 1024).toFixed(0)}KB`;
                
                try {
                    this.updateProgress(75 + (currentTest * 20 / totalTests), 
                        `–í—ã–≥—Ä—É–∑–∫–∞ ${sizeLabel} –≤ ${service.name}... (${testIndex + 1}/3)`);
                    
                    const result = await this.performUploadTest(service, testSize, sizeLabel);
                    
                    if (result && result.speedMbps > 0.1 && result.speedMbps < 1000) {
                        bestResults.push(result);
                        console.log(`‚úì ${sizeLabel} ‚Üí ${result.speedMbps.toFixed(1)} Mbps (${result.duration.toFixed(1)}s)`);
                    }

                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                    await new Promise(resolve => setTimeout(resolve, 500));

                } catch (error) {
                    console.log(`‚úó ${sizeLabel} –∫ ${service.name}: ${error.message}`);
                }
            }

            // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            if (bestResults.length >= 5) {
                console.log('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ');
                break;
            }
        }

        return this.calculateAverageUploadSpeed(bestResults);
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    async performUploadTest(service, size, sizeLabel) {
        const testData = this.generateOptimizedTestData(size, service.name);
        
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            let uploadStart = null;
            let uploadProgress = [];
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            xhr.upload.addEventListener('progress', (e) => {
                if (!uploadStart) {
                    uploadStart = performance.now();
                }
                
                if (e.lengthComputable) {
                    const currentTime = performance.now();
                    const elapsedTime = (currentTime - uploadStart) / 1000;
                    const uploadedMB = e.loaded / (1024 * 1024);
                    const instantSpeed = (uploadedMB * 8) / elapsedTime;
                    
                    uploadProgress.push({
                        time: elapsedTime,
                        loaded: e.loaded,
                        total: e.total,
                        speed: instantSpeed
                    });
                }
            });

            xhr.addEventListener('load', () => {
                if (xhr.status >= 200 && xhr.status < 300) {
                    const endTime = performance.now();
                    
                    if (uploadProgress.length > 0) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                        const lastProgress = uploadProgress[uploadProgress.length - 1];
                        const avgSpeed = this.calculateProgressiveSpeed(uploadProgress);
                        
                        resolve({
                            speedMbps: avgSpeed,
                            duration: lastProgress.time,
                            size: size,
                            service: service.name,
                            sizeLabel: sizeLabel,
                            progressPoints: uploadProgress.length
                        });
                    } else {
                        // Fallback –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                        const totalTime = (endTime - uploadStart) / 1000;
                        const sizeInMB = size / (1024 * 1024);
                        const speedMbps = (sizeInMB * 8) / totalTime;
                        
                        resolve({
                            speedMbps: speedMbps,
                            duration: totalTime,
                            size: size,
                            service: service.name,
                            sizeLabel: sizeLabel,
                            progressPoints: 0
                        });
                    }
                } else {
                    reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));
                }
            });

            xhr.addEventListener('error', () => {
                reject(new Error('Network error'));
            });

            xhr.addEventListener('timeout', () => {
                reject(new Error('Timeout'));
            });

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            xhr.open('POST', service.url);
            xhr.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            Object.entries(service.headers).forEach(([key, value]) => {
                xhr.setRequestHeader(key, value);
            });
            
            xhr.setRequestHeader('Content-Length', size.toString());
            xhr.setRequestHeader('User-Agent', 'VPN-Speed-Test/1.0');
            
            const requestStart = performance.now();
            uploadStart = requestStart;
            
            xhr.send(testData);
        });
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    calculateProgressiveSpeed(progressPoints) {
        if (progressPoints.length < 2) {
            return 0;
        }

        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10% –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10% –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        const startIndex = Math.floor(progressPoints.length * 0.1);
        const endIndex = Math.floor(progressPoints.length * 0.9);
        
        if (endIndex <= startIndex) {
            // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
            const firstPoint = progressPoints[0];
            const lastPoint = progressPoints[progressPoints.length - 1];
            
            const timeDiff = lastPoint.time - firstPoint.time;
            const dataDiff = (lastPoint.loaded - firstPoint.loaded) / (1024 * 1024);
            
            return timeDiff > 0 ? (dataDiff * 8) / timeDiff : 0;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        const startPoint = progressPoints[startIndex];
        const endPoint = progressPoints[endIndex];
        
        const timeDiff = endPoint.time - startPoint.time;
        const dataDiff = (endPoint.loaded - startPoint.loaded) / (1024 * 1024);
        
        return timeDiff > 0 ? (dataDiff * 8) / timeDiff : 0;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    generateOptimizedTestData(size, serviceName) {
        // –î–ª—è JSON —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (serviceName === 'ReqRes') {
            const baseObject = {
                name: "SpeedTest",
                job: "DataTransfer",
                timestamp: Date.now(),
                testId: Math.random().toString(36).substring(7)
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            const targetDataSize = size - JSON.stringify(baseObject).length - 100;
            const fillData = 'A'.repeat(Math.max(0, targetDataSize));
            
            return JSON.stringify({
                ...baseObject,
                data: fillData
            });
        }
        
        // –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const buffer = new ArrayBuffer(size);
        const view = new Uint8Array(buffer);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã–µ)
        for (let i = 0; i < size; i++) {
            if (i % 1024 === 0) {
                view[i] = 0xFF;
            } else if (i % 256 === 0) {
                view[i] = 0xAA;
            } else if (i % 64 === 0) {
                view[i] = (i / 64) % 256;
            } else {
                view[i] = (i * 13 + 37) % 256;
            }
        }
        
        return buffer;
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    calculateAverageUploadSpeed(results) {
        if (results.length === 0) {
            console.log('–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            return 0.5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        }

        console.log(`\n=== –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (${results.length} —Ç–µ—Å—Ç–æ–≤) ===`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const bySize = {};
        results.forEach(result => {
            const sizeKey = result.sizeLabel;
            if (!bySize[sizeKey]) bySize[sizeKey] = [];
            bySize[sizeKey].push(result.speedMbps);
        });

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        Object.entries(bySize).forEach(([size, speeds]) => {
            const avg = speeds.reduce((a, b) => a + b, 0) / speeds.length;
            const min = Math.min(...speeds);
            const max = Math.max(...speeds);
            console.log(`${size}: avg=${avg.toFixed(1)} min=${min.toFixed(1)} max=${max.toFixed(1)} Mbps (${speeds.length} —Ç–µ—Å—Ç–æ–≤)`);
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –≤–º–µ—Å—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
        const allSpeeds = results.map(r => r.speedMbps).sort((a, b) => a - b);
        const median = allSpeeds.length % 2 === 0
            ? (allSpeeds[allSpeeds.length / 2 - 1] + allSpeeds[allSpeeds.length / 2]) / 2
            : allSpeeds[Math.floor(allSpeeds.length / 2)];

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 50% –æ—Ç –º–µ–¥–∏–∞–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        const filteredResults = results.filter(r => 
            r.speedMbps >= median * 0.5 && r.speedMbps <= median * 2.0
        );

        if (filteredResults.length > 0) {
            const avgFiltered = filteredResults.reduce((sum, r) => sum + r.speedMbps, 0) / filteredResults.length;
            console.log(`–ú–µ–¥–∏–∞–Ω–∞: ${median.toFixed(1)} Mbps`);
            console.log(`–°—Ä–µ–¥–Ω–µ–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ: ${avgFiltered.toFixed(1)} Mbps (${filteredResults.length} –∏–∑ ${results.length} —Ç–µ—Å—Ç–æ–≤)`);
            
            return Math.round(avgFiltered * 10) / 10;
        }

        return Math.round(median * 10) / 10;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    updateServiceStatus(serviceName, status, text) {
        if (this.serviceChecker) {
            this.serviceChecker.updateServiceStatus(serviceName, status, text);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube iframe (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function handleYouTubeLoad() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ ServiceChecker
    console.log('YouTube iframe loaded');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new VPNDiagnostics();
});