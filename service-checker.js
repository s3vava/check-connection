// service-checker.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤

class ServiceChecker {
    constructor() {
        this.UA_Browser = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36";
    }

    // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async checkAllServices() {
        const services = ['youtube', 'telegram', 'whatsapp', 'instagram', 'chatgpt'];
        
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        services.forEach(service => {
            this.updateServiceStatus(service, 'checking', '–ü—Ä–æ–≤–µ—Ä–∫–∞...');
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const promises = services.map(service => {
            switch(service) {
                case 'youtube':
                    return this.checkYouTubeService();
                case 'chatgpt':
                    return this.checkChatGPTService();
                case 'instagram':
                    return this.checkInstagramService();
                case 'telegram':
                    return this.checkTelegramService();
                case 'whatsapp':
                    return this.checkWhatsAppService();
                default:
                    return Promise.resolve();
            }
        });

        await Promise.all(promises);
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // YouTube - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–æ–±—Ö–æ–¥ CORS)
    async checkYouTubeService() {
        console.log('üé• YouTube: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
        
        try {
            // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ embed API (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è CORS)
            const embedSuccess = await this.checkYouTubeEmbed();
            
            // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ iframe (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
            const iframeSuccess = await this.checkYouTubeIframe();
            
            // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ JSONP API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            const apiSuccess = await this.checkYouTubeAPI();
            
            // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const results = { embed: embedSuccess, iframe: iframeSuccess, api: apiSuccess };
            console.log('üé• YouTube: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤:', results);
            
            if (embedSuccess && iframeSuccess && apiSuccess) {
                console.log('üé• YouTube: ‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–≤—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç)');
                this.updateServiceStatus('youtube', 'ok', '–û–ö (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)');
            } else if (embedSuccess || iframeSuccess) {
                console.log('üé• YouTube: ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã)');
                this.updateServiceStatus('youtube', 'slow', '–ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω');
            } else {
                console.log('üé• YouTube: ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
                this.updateServiceStatus('youtube', 'error', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            }
            
        } catch (error) {
            console.log(`üé• YouTube: ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
            this.updateServiceStatus('youtube', 'error', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube —á–µ—Ä–µ–∑ embed
    async checkYouTubeEmbed() {
        try {
            console.log('üé• YouTube: –ü—Ä–æ–≤–µ—Ä—è–µ–º embed –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...');
            
            const startTime = performance.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ embed —Å–∫—Ä–∏–ø—Ç–∞
            const response = await Promise.race([
                fetch('https://www.youtube.com/iframe_api', {
                    method: 'HEAD',
                    mode: 'no-cors', // –û–±—Ö–æ–¥–∏–º CORS
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
            ]);
            
            const loadTime = performance.now() - startTime;
            console.log(`üé• YouTube: Embed API –ø—Ä–æ–≤–µ—Ä–µ–Ω –∑–∞ ${Math.round(loadTime)}–º—Å`);
            
            // –í —Ä–µ–∂–∏–º–µ no-cors –º—ã –Ω–µ –ø–æ–ª—É—á–∏–º —Å—Ç–∞—Ç—É—Å, –Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            console.log('üé• YouTube: ‚úÖ Embed API –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
            
        } catch (error) {
            console.log(`üé• YouTube: ‚ùå Embed API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ iframe
    async checkYouTubeIframe() {
        return new Promise((resolve) => {
            console.log('üé• YouTube: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ iframe...');
            
            try {
                const iframe = document.createElement('iframe');
                iframe.style.display = 'none';
                iframe.width = '1';
                iframe.height = '1';
                
                let resolved = false;
                
                // –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
                const testVideoId = 'dQw4w9WgXcQ'; // Rick Roll - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
                iframe.src = `https://www.youtube.com/embed/${testVideoId}?autoplay=0&controls=0&mute=1`;
                
                iframe.onload = () => {
                    if (!resolved) {
                        resolved = true;
                        console.log('üé• YouTube: ‚úÖ Iframe –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                        document.body.removeChild(iframe);
                        resolve(true);
                    }
                };
                
                iframe.onerror = () => {
                    if (!resolved) {
                        resolved = true;
                        console.log('üé• YouTube: ‚ùå Iframe –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è');
                        document.body.removeChild(iframe);
                        resolve(false);
                    }
                };
                
                document.body.appendChild(iframe);
                
                // –¢–∞–π–º–∞—É—Ç
                setTimeout(() => {
                    if (!resolved) {
                        resolved = true;
                        console.log('üé• YouTube: ‚ö†Ô∏è Iframe –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–∞—É—Ç');
                        if (document.body.contains(iframe)) {
                            document.body.removeChild(iframe);
                        }
                        resolve(false);
                    }
                }, 5000);
                
            } catch (error) {
                console.log(`üé• YouTube: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è iframe: ${error.message}`);
                resolve(false);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints
    async checkYouTubeAPI() {
        try {
            console.log('üé• YouTube: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API endpoints...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º oembed API - –æ–Ω –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è CORS
            const response = await Promise.race([
                fetch('https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=dQw4w9WgXcQ&format=json', {
                    method: 'GET',
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
            ]);
            
            if (response.ok) {
                const data = await response.json();
                console.log('üé• YouTube: ‚úÖ oEmbed API —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log(`üé• YouTube: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${data.title}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                if (data.title && data.author_name) {
                    return true;
                }
            }
            
            console.log(`üé• YouTube: ‚ö†Ô∏è oEmbed API –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`);
            return false;
            
        } catch (error) {
            console.log(`üé• YouTube: ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            return false;
        }
    }

    // ChatGPT - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ CDN trace (–∫–∞–∫ –≤ bash —Å–∫—Ä–∏–ø—Ç–µ)
    async checkChatGPTService() {
        console.log('ü§ñ ChatGPT: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
        
        try {
            // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ bash —Å–∫—Ä–∏–ø—Ç–∞
            const supportedCountries = [
                "AL", "DZ", "AD", "AO", "AG", "AR", "AM", "AU", "AT", "AZ", "BS", "BD", "BB", "BE", "BZ", "BJ", 
                "BT", "BO", "BA", "BW", "BR", "BN", "BG", "BF", "CV", "CA", "CL", "CO", "KM", "CG", "CR", "CI", 
                "HR", "CY", "CZ", "DK", "DJ", "DM", "DO", "EC", "SV", "EE", "FJ", "FI", "FR", "GA", "GM", "GE", 
                "DE", "GH", "GR", "GD", "GT", "GN", "GW", "GY", "HT", "VA", "HN", "HU", "IS", "IN", "ID", "IQ", 
                "IE", "IL", "IT", "JM", "JP", "JO", "KZ", "KE", "KI", "KW", "KG", "LV", "LB", "LS", "LR", "LI", 
                "LT", "LU", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MR", "MU", "MX", "FM", "MD", "MC", "MN", 
                "ME", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "NZ", "NI", "NE", "NG", "MK", "NO", "OM", "PK", 
                "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PL", "PT", "QA", "RO", "RW", "KN", "LC", "VC", "WS", 
                "SM", "ST", "SN", "RS", "SC", "SL", "SG", "SK", "SI", "SB", "ZA", "KR", "ES", "LK", "SR", "SE", 
                "CH", "TW", "TZ", "TH", "TL", "TG", "TO", "TT", "TN", "TR", "TV", "UG", "UA", "AE", "GB", "US", "UY", "VU", "ZM"
            ];

            console.log(`ü§ñ ChatGPT: –í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω: ${supportedCountries.length}`);
            console.log('ü§ñ ChatGPT: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ CDN trace...');

            const response = await Promise.race([
                fetch('https://chat.openai.com/cdn-cgi/trace', {
                    method: 'GET',
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
            ]);

            if (response.ok) {
                const text = await response.text();
                console.log('ü§ñ ChatGPT: CDN trace –ø–æ–ª—É—á–µ–Ω:');
                console.log(text);
                
                const locationMatch = text.match(/loc=([A-Z]{2})/);
                const location = locationMatch ? locationMatch[1] : '';
                
                console.log(`ü§ñ ChatGPT: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: "${location}"`);

                if (!location) {
                    console.log('ü§ñ ChatGPT: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –∏–∑ trace');
                    this.updateServiceStatus('chatgpt', 'error', '–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
                    return;
                }

                const isSupported = supportedCountries.includes(location);
                console.log(`ü§ñ ChatGPT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ ${location}: ${isSupported ? '–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø' : '–ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø'}`);

                if (isSupported) {
                    console.log(`ü§ñ ChatGPT: ‚úÖ –†–µ–≥–∏–æ–Ω ${location} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω`);
                    this.updateServiceStatus('chatgpt', 'ok', `–û–ö (${location})`);
                } else {
                    console.log(`ü§ñ ChatGPT: ‚ùå –†–µ–≥–∏–æ–Ω ${location} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                    this.updateServiceStatus('chatgpt', 'error', `–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${location})`);
                }
            } else {
                console.log(`ü§ñ ChatGPT: ‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                this.updateServiceStatus('chatgpt', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }

        } catch (error) {
            if (error.message === 'timeout') {
                console.log('ü§ñ ChatGPT: ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ CDN trace');
                this.updateServiceStatus('chatgpt', 'error', '–¢–∞–π–º–∞—É—Ç');
            } else {
                console.log(`ü§ñ ChatGPT: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
                this.updateServiceStatus('chatgpt', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }

    // Instagram - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º—É–∑—ã–∫–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ bash —Å–∫—Ä–∏–ø—Ç–∞)
    async checkInstagramService() {
        console.log('üì∏ Instagram: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
        
        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Instagram
            const startTime = performance.now();
            
            console.log('üì∏ Instagram: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HEAD –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            const basicResponse = await Promise.race([
                fetch('https://www.instagram.com/', {
                    method: 'HEAD',
                    headers: {
                        'User-Agent': this.UA_Browser
                    },
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
            ]);

            const loadTime = performance.now() - startTime;
            console.log(`üì∏ Instagram: –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${Math.round(loadTime)}–º—Å, —Å—Ç–∞—Ç—É—Å: ${basicResponse.status}`);

            if (!basicResponse.ok) {
                console.log(`üì∏ Instagram: ‚ùå –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ - HTTP ${basicResponse.status}`);
                this.updateServiceStatus('instagram', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            console.log('üì∏ Instagram: ‚úÖ –ë–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
            console.log('üì∏ Instagram: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try {
                const apiStartTime = performance.now();
                const detailedResponse = await Promise.race([
                    fetch('https://www.instagram.com/api/v1/web/data/shared_data/', {
                        method: 'GET',
                        headers: {
                            'User-Agent': this.UA_Browser,
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        cache: 'no-cache'
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 3000))
                ]);

                const apiLoadTime = performance.now() - apiStartTime;
                console.log(`üì∏ Instagram: API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${Math.round(apiLoadTime)}–º—Å, —Å—Ç–∞—Ç—É—Å: ${detailedResponse.status}`);

                if (detailedResponse.ok) {
                    const data = await detailedResponse.json();
                    console.log('üì∏ Instagram: ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
                    console.log(`üì∏ Instagram: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(data).join(', ')}`);
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª–Ω—ã–π
                    if (loadTime < 2000) {
                        console.log(`üì∏ Instagram: ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (${Math.round(loadTime)}–º—Å)`);
                        this.updateServiceStatus('instagram', 'ok', '–û–ö');
                    } else {
                        console.log(`üì∏ Instagram: ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(loadTime)}–º—Å)`);
                        this.updateServiceStatus('instagram', 'slow', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
                    }
                } else {
                    console.log(`üì∏ Instagram: ‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${detailedResponse.status}), –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç`);
                    // –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å, –Ω–æ API –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
                    this.updateServiceStatus('instagram', 'slow', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω');
                }
            } catch (apiError) {
                console.log(`üì∏ Instagram: ‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (${apiError.message}), –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...`);
                
                // API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                if (loadTime < 3000) {
                    console.log(`üì∏ Instagram: ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç)`);
                    this.updateServiceStatus('instagram', 'slow', '–ß–∞—Å—Ç–∏—á–Ω–æ');
                } else {
                    console.log(`üì∏ Instagram: ‚ùå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('instagram', 'error', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
                }
            }

        } catch (error) {
            if (error.message === 'timeout') {
                console.log('üì∏ Instagram: ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ');
                this.updateServiceStatus('instagram', 'error', '–¢–∞–π–º–∞—É—Ç');
            } else {
                console.log(`üì∏ Instagram: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
                this.updateServiceStatus('instagram', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }

    // Telegram - –ø—Ä–æ–≤–µ—Ä–∫–∞ Web –≤–µ—Ä—Å–∏–∏
    async checkTelegramService() {
        console.log('üí¨ Telegram: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
        
        try {
            const startTime = performance.now();
            
            console.log('üí¨ Telegram: –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Web (https://web.telegram.org/z/)...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Web
            const response = await Promise.race([
                fetch('https://web.telegram.org/z/', {
                    method: 'HEAD',
                    headers: {
                        'User-Agent': this.UA_Browser
                    },
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
            ]);

            const loadTime = performance.now() - startTime;
            console.log(`üí¨ Telegram: Web –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${Math.round(loadTime)}–º—Å, —Å—Ç–∞—Ç—É—Å: ${response.status}`);

            if (response.ok) {
                console.log('üí¨ Telegram: ‚úÖ Telegram Web –¥–æ—Å—Ç—É–ø–µ–Ω');
                
                if (loadTime < 2000) {
                    console.log(`üí¨ Telegram: ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('telegram', 'ok', '–û–ö');
                } else if (loadTime < 5000) {
                    console.log(`üí¨ Telegram: ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('telegram', 'slow', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
                } else {
                    console.log(`üí¨ Telegram: ‚ùå –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('telegram', 'error', '–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ');
                }
            } else {
                console.log(`üí¨ Telegram: ‚ö†Ô∏è Telegram Web –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status}), –ø—Ä–æ–≤–µ—Ä—è–µ–º API...`);
                
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                try {
                    const apiStartTime = performance.now();
                    const apiResponse = await Promise.race([
                        fetch('https://api.telegram.org/', {
                            method: 'HEAD',
                            cache: 'no-cache'
                        }),
                        new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 3000))
                    ]);
                    
                    const apiLoadTime = performance.now() - apiStartTime;
                    console.log(`üí¨ Telegram: API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${Math.round(apiLoadTime)}–º—Å, —Å—Ç–∞—Ç—É—Å: ${apiResponse.status}`);
                    
                    if (apiResponse.ok) {
                        console.log('üí¨ Telegram: ‚ö†Ô∏è Web –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç');
                        this.updateServiceStatus('telegram', 'slow', 'API –¥–æ—Å—Ç—É–ø–µ–Ω');
                    } else {
                        console.log(`üí¨ Telegram: ‚ùå –ò Web –∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
                        this.updateServiceStatus('telegram', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    }
                } catch (apiError) {
                    console.log(`üí¨ Telegram: ‚ùå API —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${apiError.message}`);
                    this.updateServiceStatus('telegram', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            }

        } catch (error) {
            if (error.message === 'timeout') {
                console.log('üí¨ Telegram: ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Web –≤–µ—Ä—Å–∏–∏');
                this.updateServiceStatus('telegram', 'error', '–¢–∞–π–º–∞—É—Ç');
            } else {
                console.log(`üí¨ Telegram: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
                this.updateServiceStatus('telegram', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }

    // WhatsApp - –ø—Ä–æ–≤–µ—Ä–∫–∞ Web –≤–µ—Ä—Å–∏–∏
    async checkWhatsAppService() {
        console.log('üì± WhatsApp: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...');
        
        try {
            const startTime = performance.now();
            
            console.log('üì± WhatsApp: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HEAD –∑–∞–ø—Ä–æ—Å –Ω–∞ https://web.whatsapp.com/...');
            
            const response = await Promise.race([
                fetch('https://web.whatsapp.com/', {
                    method: 'HEAD',
                    headers: {
                        'User-Agent': this.UA_Browser
                    },
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
            ]);

            const loadTime = performance.now() - startTime;
            console.log(`üì± WhatsApp: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${Math.round(loadTime)}–º—Å, —Å—Ç–∞—Ç—É—Å: ${response.status}`);

            if (response.ok) {
                console.log('üì± WhatsApp: ‚úÖ WhatsApp Web –¥–æ—Å—Ç—É–ø–µ–Ω');
                
                if (loadTime < 2000) {
                    console.log(`üì± WhatsApp: ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('whatsapp', 'ok', '–û–ö');
                } else if (loadTime < 5000) {
                    console.log(`üì± WhatsApp: ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('whatsapp', 'slow', '–ú–µ–¥–ª–µ–Ω–Ω–æ');
                } else {
                    console.log(`üì± WhatsApp: ‚ùå –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(loadTime)}–º—Å)`);
                    this.updateServiceStatus('whatsapp', 'error', '–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ');
                }
            } else {
                console.log(`üì± WhatsApp: ‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                this.updateServiceStatus('whatsapp', 'error', `HTTP ${response.status}`);
            }

        } catch (error) {
            if (error.message === 'timeout') {
                console.log('üì± WhatsApp: ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Web –≤–µ—Ä—Å–∏–∏');
                this.updateServiceStatus('whatsapp', 'error', '–¢–∞–π–º–∞—É—Ç');
            } else {
                console.log(`üì± WhatsApp: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
                this.updateServiceStatus('whatsapp', 'error', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ UI
    updateServiceStatus(serviceName, status, text) {
        const statusElement = document.getElementById(`${serviceName}-status`);
        if (!statusElement) {
            console.log(`Service status update: ${serviceName} -> ${status}: ${text}`);
            return;
        }
        
        const indicator = statusElement.querySelector('.status-indicator');
        const textElement = statusElement.querySelector('.status-text');

        if (indicator) {
            indicator.className = `status-indicator ${status}`;
        }
        if (textElement) {
            textElement.textContent = text;
        }

        console.log(`‚úì ${serviceName}: ${text} (${status})`);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ UI)
    async recheckService(serviceName) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: ${serviceName}`);
        this.updateServiceStatus(serviceName, 'checking', '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
        
        switch(serviceName) {
            case 'youtube':
                await this.checkYouTubeService();
                break;
            case 'chatgpt':
                await this.checkChatGPTService();
                break;
            case 'instagram':
                await this.checkInstagramService();
                break;
            case 'telegram':
                await this.checkTelegramService();
                break;
            case 'whatsapp':
                await this.checkWhatsAppService();
                break;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    async getDetailedReport() {
        console.log('üìã –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        const services = ['youtube', 'chatgpt', 'instagram', 'telegram', 'whatsapp'];
        const report = {
            timestamp: new Date().toISOString(),
            services: {}
        };

        console.log(`üìã –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: ${report.timestamp}`);

        for (const service of services) {
            console.log(`üìã –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${service}...`);
            await this.recheckService(service);
            
            const statusElement = document.getElementById(`${service}-status`);
            if (statusElement) {
                const indicator = statusElement.querySelector('.status-indicator');
                const text = statusElement.querySelector('.status-text');
                
                report.services[service] = {
                    status: indicator ? indicator.className.split(' ').pop() : 'unknown',
                    message: text ? text.textContent : 'No data'
                };
                
                console.log(`üìã ${service}: ${report.services[service].status} - ${report.services[service].message}`);
            }
        }

        console.log('üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤:', report);
        return report;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ServiceChecker;
} else if (typeof window !== 'undefined') {
    window.ServiceChecker = ServiceChecker;
}